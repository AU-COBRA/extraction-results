Main contract CounterCertifiedExtraction
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "powInt"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "modInt"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "eqInt"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "ltInt"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "mulInt"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "snd"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq: Warning: 
unused variable "fst"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:34.65-34.69: Warning: 
unused variable "ctx'"
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:2.38-2.43: Warning: 
Unresolved type 'a. Type variables 'a were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:2.18-2.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:3.38-3.43: Warning: 
Unresolved type 'b. Type variables 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:3.18-3.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.liq:42.18-42.96: Warning: 
Unresolved type (((int * key_hash) -> (operation list * (int * key_hash)))[@closure
                                                            :(((msg ->
                                                                  (((int *
                                                                    key_hash)
                                                                    ->
                                                                    ('d3 list
                                                                    * (int *
                                                                    key_hash))
                                                                    option)
                                                                  [@closure
                                                                    :
                                                                    (((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int *
                                                                    key_hash)
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (((int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int ->
                                                                    ((int ->
                                                                    int)[@closure
                                                                    :int])) *
                                                                    (int *
                                                                    key_hash))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    bool)
                                                                    [@closure
                                                                    :int])) *
                                                                    msg)]))
                                                               [@closure
                                                                 :(((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int *
                                                                    key_hash)
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    ((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int ->
                                                                    ((int ->
                                                                    int)[@closure
                                                                    :int])) *
                                                                    (int *
                                                                    key_hash))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (
                                                                    int ->
                                                                    ((int ->
                                                                    bool)
                                                                    [@closure
                                                                    :int])))])
                                                               * msg)]). Type variables 'd3 were replaced by unit.
Storage initializer generated in "examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.initializer.tz"
File "examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.tz" generated
You may want to typecheck with:
  dune-client typecheck script examples/extracted-code/liquidity-extract/tests/CounterCertifiedExtraction.tz
Main contract CounterDepCertifiedExtraction
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "powInt"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "modInt"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "eqInt"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "ltInt"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "mulInt"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "snd"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq: Warning: 
unused variable "fst"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:45.69-45.73: Warning: 
unused variable "ctx'"
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:2.38-2.43: Warning: 
Unresolved type 'a. Type variables 'a were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:2.18-2.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:3.38-3.43: Warning: 
Unresolved type 'b. Type variables 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:3.18-3.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.liq:53.18-53.100: Warning: 
Unresolved type (((int * key_hash) -> (operation list * (int * key_hash)))[@closure
                                                            :(((coq_msg ->
                                                                  (((int *
                                                                    key_hash)
                                                                    ->
                                                                    ('k3 list
                                                                    * (int *
                                                                    key_hash))
                                                                    option)
                                                                  [@closure
                                                                    :
                                                                    (((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int *
                                                                    key_hash)
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (((int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int ->
                                                                    ((int ->
                                                                    int)[@closure
                                                                    :int])) *
                                                                    (int *
                                                                    key_hash))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (bool ->
                                                                    ((bool ->
                                                                    coq_sumbool)
                                                                    [@closure
                                                                    :bool]))
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    bool)
                                                                    [@closure
                                                                    :int])) *
                                                                    coq_msg)]))
                                                               [@closure
                                                                 :(((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int *
                                                                    key_hash)
                                                                    *
                                                                    (int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    ((
                                                                    (int *
                                                                    key_hash)
                                                                    ->
                                                                    ((int ->
                                                                    (int *
                                                                    key_hash))
                                                                    [@closure
                                                                    :((int ->
                                                                    ((int ->
                                                                    int)[@closure
                                                                    :int])) *
                                                                    (int *
                                                                    key_hash))]))
                                                                    [@closure
                                                                    :int ->
                                                                    ((int ->
                                                                    int)
                                                                    [@closure
                                                                    :int])])
                                                                    *
                                                                    (
                                                                    bool ->
                                                                    ((bool ->
                                                                    coq_sumbool)
                                                                    [@closure
                                                                    :bool]))
                                                                    *
                                                                    (
                                                                    int ->
                                                                    ((int ->
                                                                    bool)
                                                                    [@closure
                                                                    :int])))])
                                                               * coq_msg)]). Type variables 'k3 were replaced by unit.
Storage initializer generated in "examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.initializer.tz"
File "examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.tz" generated
You may want to typecheck with:
  dune-client typecheck script examples/extracted-code/liquidity-extract/tests/CounterDepCertifiedExtraction.tz
Main contract CrowdfundingCertifiedExtraction
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "crowdfunding_receive"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "eqb_time"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "orb"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "eqNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "lxorNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "ltNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "leNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "subNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "mulNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "addNat"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "multTez"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "divTez"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "evenTez"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "gtTez"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "subTez"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "powInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "modInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "eqInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "ltInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "leInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "subInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "mulInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "addInt"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "snd"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq: Warning: 
unused variable "fst"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:82.4-82.7: Warning: 
unused variable "snd"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:81.63-81.66: Warning: 
unused variable "fst"
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:2.38-2.43: Warning: 
Unresolved type 'a. Type variables 'a were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:2.18-2.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:3.38-3.43: Warning: 
Unresolved type 'b. Type variables 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:3.18-3.19: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:82.29-82.34: Warning: 
Unresolved type 'b. Type variables 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:82.9-82.10: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:81.88-81.93: Warning: 
Unresolved type 'a. Type variables 'a were replaced by unit.
./examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.liq:81.68-81.69: Warning: 
Unresolved type ('a * 'b). Type variables 'a, 'b were replaced by unit.
Storage initializer generated in "examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.initializer.tz"
File "examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.tz" generated
You may want to typecheck with:
  dune-client typecheck script examples/extracted-code/liquidity-extract/tests/CrowdfundingCertifiedExtraction.tz
